# gsub, gsub!
# gsubメソッドを使うと、第1引数の正規表現にマッチした文字列を第2引数の文字列で置き換えができる。
text = '123,456-789'

# 第1引数に文字列渡すと、完全一致するもじれつにを第2引数で置き換える
p text.gsub(',', ':')   #=> "123:456-789"

# 正規表現を渡すと、マッチした部分を第2引数で置き換える
p text.gsub(/,|-/, ':')   #=> "123:456:789"


# キャプチャを使うと、第2引数で\1や\2のようにしてキャプチャした文字列を連番で参照できる。
text = '誕生日は1993年10月1日です'
p text.gsub(/(\d+)年(\d+)月(\d+)日/, '\1-\2-\3')   #=> 誕生日は1993-10-1です"

# 名前付きキャプチャの場合は\k<name>のようにして参照できる。
text = '誕生日は1993年10月1日です'
p text.gsub(
  /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/,
  '\k<year>-\k<month>-\k<day>'
)
#=> 誕生日は1993-10-1です"

# 。。。。バクスラkとか覚えにくいけどがんばれ  

# 第2引数にハッシュを渡して、変換のルールを指定することもできる
text = '123,456-789'
# カンマはコロンに、ハイフンはスラッシュに置き換える
hash = { ',' => ':', '-' => '/' }
p text.gsub(/,|-/, hash)  #=> "123:456/789"
#これ便利だなあ、変換ツール渡す感じか

# 第2引数を渡す代わりに、ブロックの戻り値で置き換える文字列を指定することも可能。
text = '123,456-789'
# カンマはコロンに、それ以外はスラッシュに置き換える
p text.gsub(/,|-/) { |matched| matched == ',' ? ':' : '/' }
#=> "123:456/789"

# gsub!メソッドは文字列の内容を破壊的に置換する。
text = '123,456-789'
text.gsub!(/,|-/, ':')
p text #=> "123:456:789"

# Stringクラスで正規表現が使えるメソッドはほかにもまだまだある。
# Rubyの公式ドキュメントに詳しく載ってる。