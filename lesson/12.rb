# [], slice, slice!

# []に正規表現を渡すと、文字列から正規表現にマッチした部分を抜き出す。
text = '郵便番号は123-4567です'
p text[/\d+{3}-\d+{4}/] #=> "123-4567"

# マッチする部分が複数ある場合は、最初にマッチした文字列が返る。
text = '123-4567 456-7890'
p text[/\d+{3}-\d+{4}/] #=> "123-4567"

# キャプチャを使うと第2引数で何番目のキャプチャを取得するか指定できる。
text = '私の誕生日は1993年10月1日です。'

# 第2引数がないとマッチした部分全体が返る
p text[/(\d+)年(\d+)月(\d+)日/] #=> "1993年10月1日"

# 第2引数を指定して3番目のキャプチャを取得する
p text[/(\d+)年(\d+)月(\d+)日/, 3] #=> "1"


# 名前付きキャプチャであれば名前を指定することも可能。
text = '私の誕生日は1993年10月1日です。'

# シンボルでキャプチャの名前を指定する
p text[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, :day] #=> "1"

# 文字列でキャプチャの名前を指定する
p text[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, 'day'] #=> "1"


# sliceメソッドは[]のエイリアスメソッド
text = '郵便番号は123-4567です'
p text.slice(/\d{3}-\d{4}/)      #=> "123-4567"

text = '私の誕生日は1993年10月1日です。'
# シンボルでキャプチャの名前を指定する
p text.slice(/(\d+)年(\d+)月(\d+)日/, 3)   #=> "1"

# slice!にするとマッチした部分が文字列から破壊的に取り除かれる
text = '郵便番号は123-4567です'
p text.slice!(/\d{3}-\d{4}/)  #=> "123-4567"
p text          #=>  "郵便番号はです"

# なんか取り出して消えるメソッド使う時にめっちゃ使えそう